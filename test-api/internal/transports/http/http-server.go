package http_server_module

import (
	"context"
	"log/slog"
	"net/http"
	"strconv"
	"time"

	_ "github.com/init-pkg/nova-template/docs" // docs is generated by Swag CLI, you have to import it.

	"github.com/init-pkg/nova-template/internal/config"

	"github.com/Flussen/swagger-fiber-v3"
	"github.com/gofiber/fiber/v3"
	"github.com/gofiber/fiber/v3/middleware/cors"
	"github.com/gofiber/fiber/v3/middleware/logger"
	"github.com/gofiber/fiber/v3/middleware/recover"
	"github.com/gofiber/fiber/v3/middleware/static"
	"go.uber.org/fx"
)

func MustInit(
	cfg *config.Config,
	log *slog.Logger,
) *fiber.App {
	app := fiber.New(fiber.Config{})

	app.Use(logger.New())
	app.Use(recover.New())
	app.Use(cors.New(cors.Config{
		AllowOrigins: cfg.Transports.Fiber.AllowOrigins,
		AllowHeaders: []string{"Origin", "Content-Type", "X-Access-Token"},
		AllowMethods: []string{
			fiber.MethodGet,
			fiber.MethodPost,
			fiber.MethodHead,
			fiber.MethodPut,
			fiber.MethodDelete,
			fiber.MethodPatch,
		},

		AllowCredentials: true,
		ExposeHeaders:    []string{"Set-Cookie"},
		MaxAge:           3600,
	}))

	app.Use("/public", static.New("./public"))
	app.Use("/public/storage", static.New("./storage/public"))

	app.Use(func(c fiber.Ctx) error {
		c.Response().Header.Del("Vary")

		return c.Next()
	})
	app.Get("/swagger/*", swagger.HandlerDefault)

	app.Get("/", func(c fiber.Ctx) error {
		return c.JSON(map[string]any{"timestamp": time.Now(), "name": "Nova template"})
	})

	app.Get("/favicon.ico", func(c fiber.Ctx) error {
		return c.SendStatus(http.StatusNoContent)
	})

	return app

}

func MustStart(lc fx.Lifecycle, app *fiber.App, cfg *config.Config, log *slog.Logger) {
	lc.Append(fx.Hook{
		OnStart: func(ctx context.Context) error {
			go func() {
				var err = app.Listen(":"+strconv.Itoa(cfg.Transports.Fiber.Port), fiber.ListenConfig{EnablePrefork: cfg.Transports.Fiber.Prefork})

				if err != nil && err != http.ErrServerClosed {
					log.Error("Error when starting server", slog.Any("err", err.Error()))
				}
			}()
			return nil
		},
	})
}
